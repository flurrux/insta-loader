{"mappings":"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","sources":["./app/src/options/options.js"],"sourcesContent":["\r\n\r\n//rules ###\r\n//downloaded as, username, baseDirectory, folderPath\r\nconst ruleEntryClasses = {};\r\nconst getRuleEntryTagNameByKey = key => {\r\n    return ruleEntryClasses[key];\r\n};\r\nconst getRuleEntryKeyByTagName = tagName => {\r\n    return Reflect.ownKeys(ruleEntryClasses).find(key => ruleEntryClasses[key] === tagName);\r\n};\r\n\r\nclass RuleEntry extends HTMLElement {\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({ mode: \"open\" });\r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                #delete-button {\r\n                    border-radius: 50%; \r\n                    background-color: white; \r\n                    border: 1px solid black;\r\n                }\r\n            </style>\r\n            ${this.getContentHTML()}\r\n            <button id=\"delete-button\">x</button>\r\n        `;\r\n        this.shadowRoot.querySelector(\"#delete-button\").addEventListener(\"click\", e => {\r\n            this.remove()\r\n            saveRules();\r\n        });\r\n    }\r\n    getContentHTML(){\r\n        return \"\";\r\n    }\r\n    static getRuleLabel(){\r\n        return \"\";\r\n    }\r\n    getRuleValue(){\r\n        return null;\r\n    }\r\n    setRuleValue(newRuleValue){\r\n        this._currentRuleValue = newRuleValue;\r\n    }\r\n}\r\nclass TextRuleEntry extends RuleEntry {\r\n    constructor(){\r\n        super();\r\n        this.shadowRoot.querySelector(\"#rule-value-input\").addEventListener(\"change\", () => saveRules());\r\n    }\r\n    getContentHTML(){\r\n        return `\r\n            <label>${this.constructor.getRuleLabel()}</label>\r\n            <input id=\"rule-value-input\" type=\"text\" value=\"\" />\r\n        `;\r\n    }\r\n    static getRuleLabel(){\r\n        return \"\";\r\n    }\r\n    getRuleValue(){\r\n        return this.shadowRoot.querySelector(\"#rule-value-input\").value;\r\n    }\r\n    setRuleValue(newRuleValue){\r\n        return this.shadowRoot.querySelector(\"#rule-value-input\").value = newRuleValue;\r\n    }\r\n}\r\nclass CommaSeperatedTextRuleEntry extends TextRuleEntry {\r\n    getRuleValue(){\r\n        const rawText = this.shadowRoot.querySelector(\"#rule-value-input\").value;\r\n        return rawText.split(\",\").map(part => part.trim());\r\n    }\r\n    setRuleValue(newRuleValue){\r\n        return this.shadowRoot.querySelector(\"#rule-value-input\").value = newRuleValue.join(\", \");\r\n    }\r\n}\r\n\r\nclass DownloadedAsRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"downloaded as\";\r\n    }\r\n}\r\ncustomElements.define(\"downloaded-as-rule-entry\", DownloadedAsRuleEntry);\r\nruleEntryClasses.downloadAs = \"downloaded-as-rule-entry\";\r\n\r\nclass UserNameRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"username\";\r\n    }\r\n}\r\ncustomElements.define(\"username-rule-entry\", UserNameRuleEntry);\r\nruleEntryClasses.username = \"username-rule-entry\";\r\n\r\nclass BaseDirectoryRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"base directory\";\r\n    }\r\n}\r\ncustomElements.define(\"basedirectory-rule-entry\", BaseDirectoryRuleEntry);\r\nruleEntryClasses.baseDirectory = \"basedirectory-rule-entry\";\r\n\r\nclass FolderPathRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"folder path\";\r\n    }\r\n}\r\ncustomElements.define(\"folder-path-as-rule-entry\", FolderPathRuleEntry);\r\nruleEntryClasses.folderPath = \"folder-path-as-rule-entry\";\r\n\r\nclass RuleElement extends HTMLElement {\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({ mode: \"open\" });\r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                #rule-body {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    flex: 1;\r\n                }\r\n                #rules-container {\r\n                    //display: grid;\r\n                    //grid-template-columns: 200px 1fr;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n                #add-rule-entry-button {\r\n                    height: fit-content;\r\n                }\r\n            </style>\r\n            <div id=\"rule-body\">\r\n                <div id=\"rules-container\"></div>\r\n                <select id=\"add-rule-entry-button\" value=\"+\">\r\n                    <option selected disabled>+</option>\r\n                    ${\r\n                        Reflect.ownKeys(ruleEntryClasses).map(key => {\r\n                            return `\r\n                                <option data-rule-key=\"${key}\">${key}</option>\r\n                            `;\r\n                        })\r\n                        .join(\"\")\r\n                    }\r\n                </select>\r\n            </div>\r\n        `;\r\n        \r\n        const addRuleEntryButton = this.shadowRoot.querySelector(\"#add-rule-entry-button\");\r\n        addRuleEntryButton.addEventListener(\"change\", () => {\r\n            const selectedOption = addRuleEntryButton.selectedOptions[0];\r\n            const selectedTagName = ruleEntryClasses[selectedOption.getAttribute(\"data-rule-key\")];\r\n            const rulesContainer = this.shadowRoot.querySelector(\"#rules-container\");\r\n            if (this.hasRuleEntryOfType(selectedTagName)){\r\n                return;\r\n            }\r\n            const ruleEntryElement = document.createElement(selectedTagName);\r\n            rulesContainer.appendChild(ruleEntryElement);\r\n            saveRules();\r\n        });\r\n    }\r\n    addRuleEntry(entryElement){\r\n        this.shadowRoot.querySelector(\"#rules-container\").appendChild(entryElement);\r\n    }\r\n    hasRuleEntryOfType(tagName){\r\n        const rulesContainer = this.shadowRoot.querySelector(\"#rules-container\");\r\n        return Array.from(rulesContainer.children).some(child => child.tagName.toLowerCase() === tagName);\r\n    }\r\n    getRuleData(){\r\n        const rulesContainer = this.shadowRoot.querySelector(\"#rules-container\");\r\n        const ruleEntries = Array.from(rulesContainer.children);\r\n        const ruleData = {};\r\n        for (let entry of ruleEntries){\r\n            ruleData[getRuleEntryKeyByTagName(entry.tagName.toLowerCase())] = entry.getRuleValue();\r\n        }\r\n        return ruleData;\r\n    }\r\n}\r\ncustomElements.define(\"rule-element\", RuleElement);\r\n\r\ndocument.querySelector(\"#add-rule-button\").addEventListener(\"click\", () => {\r\n    const ruleElement = document.createElement(\"rule-element\");\r\n    document.querySelector(\"#rule-list\").appendChild(ruleElement);\r\n});\r\n\r\nfunction saveRules(){\r\n    const ruleElements = Array.from(document.querySelector(\"#rule-list\").children);\r\n    const rulesData = ruleElements.map(ruleElement => ruleElement.getRuleData());\r\n    chrome.storage.sync.set(\r\n        { directoryRules: rulesData }, \r\n        () => console.log(\"saved\")\r\n    )\r\n}\r\n\r\nfunction restoreOptions() {\r\n    chrome.storage.sync.get(\r\n        {\r\n\t\t\tbaseDownloadDirectory: \"\",\r\n\t\t\tdownloadMethod: \"chrome-background\", \r\n            directoryRules: []\r\n        }, \r\n        (items) => {\r\n            document.querySelector(\"#download-directory-input\").value = items.baseDownloadDirectory;\r\n\t\t\r\n\t\t\tdocument.querySelector(\"#download-method\").selectedIndex = [\r\n\t\t\t\t\"native\",\r\n\t\t\t\t\"chrome-background\"\r\n\t\t\t].indexOf(items.downloadMethod);\r\n\r\n            const ruleList = document.querySelector(\"#rule-list\");\r\n            for (let rule of items.directoryRules){\r\n                const ruleElement = document.createElement(\"rule-element\");\r\n                ruleList.appendChild(ruleElement);\r\n\r\n                for (let ruleKey of Reflect.ownKeys(rule)){\r\n                    const entryClass = ruleEntryClasses[ruleKey];\r\n                    const entryElement = document.createElement(entryClass);\r\n                    entryElement.setRuleValue(rule[ruleKey]);\r\n                    ruleElement.addRuleEntry(entryElement);\r\n                }\r\n            }\r\n        }\r\n    );\r\n}\r\ndocument.addEventListener('DOMContentLoaded', restoreOptions);\r\n\r\ndocument.querySelector(\"#download-method\").addEventListener(\"input\", (e) => {\r\n\tconst selectEl = e.srcElement;\r\n\tconst selectedMethod = selectEl[selectEl.selectedIndex].value;\r\n\tchrome.storage.sync.set(\r\n\t\t{ \r\n\t\t\tdownloadMethod: selectedMethod \r\n\t\t},\r\n\t\t() => console.log(\"saved\")\r\n\t)\r\n});\r\n\r\n//baseDirectory ###\r\ndocument.querySelector(\"#download-directory-input\").addEventListener(\"change\", () => {\r\n    chrome.storage.sync.set(\r\n        { baseDownloadDirectory: document.querySelector(\"#download-directory-input\").value }, \r\n        () => console.log(\"saved\")\r\n    )\r\n});"],"names":["$8e0add099dc9df99d7169d944c3f9ab8$var$ruleEntryClasses","$8e0add099dc9df99d7169d944c3f9ab8$var$getRuleEntryKeyByTagName","tagName","Reflect","ownKeys","find","key","$8e0add099dc9df99d7169d944c3f9ab8$var$RuleEntry","HTMLElement","constructor","super","this","attachShadow","mode","shadowRoot","innerHTML","getContentHTML","querySelector","addEventListener","e","remove","$8e0add099dc9df99d7169d944c3f9ab8$var$saveRules","getRuleValue","setRuleValue","newRuleValue","_currentRuleValue","$8e0add099dc9df99d7169d944c3f9ab8$var$TextRuleEntry","getRuleLabel","value","$8e0add099dc9df99d7169d944c3f9ab8$var$CommaSeperatedTextRuleEntry","split","map","part","trim","join","customElements","define","downloadAs","username","baseDirectory","folderPath","$8e0add099dc9df99d7169d944c3f9ab8$var$RuleElement","addRuleEntryButton","selectedOption","selectedOptions","selectedTagName","getAttribute","rulesContainer","hasRuleEntryOfType","ruleEntryElement","document","createElement","appendChild","addRuleEntry","entryElement","Array","from","children","some","child","toLowerCase","getRuleData","ruleEntries","ruleData","entry","rulesData","ruleElement","chrome","storage","sync","set","directoryRules","console","log","get","baseDownloadDirectory","downloadMethod","items","selectedIndex","indexOf","ruleList","rule","ruleKey","entryClass","selectEl","srcElement","selectedMethod"],"version":3,"file":"options.js.map"}