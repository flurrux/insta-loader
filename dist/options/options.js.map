{"version":3,"sources":["options.js"],"names":["ruleEntryClasses","getRuleEntryTagNameByKey","key","getRuleEntryKeyByTagName","tagName","Reflect","ownKeys","find","RuleEntry","HTMLElement","constructor","attachShadow","mode","shadowRoot","innerHTML","getContentHTML","querySelector","addEventListener","e","remove","saveRules","getRuleLabel","getRuleValue","setRuleValue","newRuleValue","_currentRuleValue","TextRuleEntry","value","CommaSeperatedTextRuleEntry","rawText","split","map","part","trim","join","DownloadedAsRuleEntry","customElements","define","downloadAs","UserNameRuleEntry","username","BaseDirectoryRuleEntry","baseDirectory","FolderPathRuleEntry","folderPath","RuleElement","addRuleEntryButton","selectedOption","selectedOptions","selectedTagName","getAttribute","rulesContainer","hasRuleEntryOfType","ruleEntryElement","document","createElement","appendChild","addRuleEntry","entryElement","Array","from","children","some","child","toLowerCase","getRuleData","ruleEntries","ruleData","entry","ruleElements","rulesData","ruleElement","chrome","storage","sync","set","directoryRules","console","log","restoreOptions","get","baseDownloadDirectory","items","ruleList","rule","ruleKey","entryClass"],"mappings":"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","file":"options.js","sourceRoot":"../../app/src/options","sourcesContent":["\r\n\r\n//rules ###\r\n//downloaded as, username, baseDirectory, folderPath\r\nconst ruleEntryClasses = {};\r\nconst getRuleEntryTagNameByKey = key => {\r\n    return ruleEntryClasses[key];\r\n};\r\nconst getRuleEntryKeyByTagName = tagName => {\r\n    return Reflect.ownKeys(ruleEntryClasses).find(key => ruleEntryClasses[key] === tagName);\r\n};\r\n\r\nclass RuleEntry extends HTMLElement {\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({ mode: \"open\" });\r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                #delete-button {\r\n                    border-radius: 50%; \r\n                    background-color: white; \r\n                    border: 1px solid black;\r\n                }\r\n            </style>\r\n            ${this.getContentHTML()}\r\n            <button id=\"delete-button\">x</button>\r\n        `;\r\n        this.shadowRoot.querySelector(\"#delete-button\").addEventListener(\"click\", e => {\r\n            this.remove()\r\n            saveRules();\r\n        });\r\n    }\r\n    getContentHTML(){\r\n        return \"\";\r\n    }\r\n    static getRuleLabel(){\r\n        return \"\";\r\n    }\r\n    getRuleValue(){\r\n        return null;\r\n    }\r\n    setRuleValue(newRuleValue){\r\n        this._currentRuleValue = newRuleValue;\r\n    }\r\n}\r\nclass TextRuleEntry extends RuleEntry {\r\n    constructor(){\r\n        super();\r\n        this.shadowRoot.querySelector(\"#rule-value-input\").addEventListener(\"change\", () => saveRules());\r\n    }\r\n    getContentHTML(){\r\n        return `\r\n            <label>${this.constructor.getRuleLabel()}</label>\r\n            <input id=\"rule-value-input\" type=\"text\" value=\"\" />\r\n        `;\r\n    }\r\n    static getRuleLabel(){\r\n        return \"\";\r\n    }\r\n    getRuleValue(){\r\n        return this.shadowRoot.querySelector(\"#rule-value-input\").value;\r\n    }\r\n    setRuleValue(newRuleValue){\r\n        return this.shadowRoot.querySelector(\"#rule-value-input\").value = newRuleValue;\r\n    }\r\n}\r\nclass CommaSeperatedTextRuleEntry extends TextRuleEntry {\r\n    getRuleValue(){\r\n        const rawText = this.shadowRoot.querySelector(\"#rule-value-input\").value;\r\n        return rawText.split(\",\").map(part => part.trim());\r\n    }\r\n    setRuleValue(newRuleValue){\r\n        return this.shadowRoot.querySelector(\"#rule-value-input\").value = newRuleValue.join(\", \");\r\n    }\r\n}\r\n\r\nclass DownloadedAsRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"downloaded as\";\r\n    }\r\n}\r\ncustomElements.define(\"downloaded-as-rule-entry\", DownloadedAsRuleEntry);\r\nruleEntryClasses.downloadAs = \"downloaded-as-rule-entry\";\r\n\r\nclass UserNameRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"username\";\r\n    }\r\n}\r\ncustomElements.define(\"username-rule-entry\", UserNameRuleEntry);\r\nruleEntryClasses.username = \"username-rule-entry\";\r\n\r\nclass BaseDirectoryRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"base directory\";\r\n    }\r\n}\r\ncustomElements.define(\"basedirectory-rule-entry\", BaseDirectoryRuleEntry);\r\nruleEntryClasses.baseDirectory = \"basedirectory-rule-entry\";\r\n\r\nclass FolderPathRuleEntry extends CommaSeperatedTextRuleEntry {\r\n    static getRuleLabel(){\r\n        return \"folder path\";\r\n    }\r\n}\r\ncustomElements.define(\"folder-path-as-rule-entry\", FolderPathRuleEntry);\r\nruleEntryClasses.folderPath = \"folder-path-as-rule-entry\";\r\n\r\nclass RuleElement extends HTMLElement {\r\n    constructor(){\r\n        super();\r\n        this.attachShadow({ mode: \"open\" });\r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                #rule-body {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    flex: 1;\r\n                }\r\n                #rules-container {\r\n                    //display: grid;\r\n                    //grid-template-columns: 200px 1fr;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n                #add-rule-entry-button {\r\n                    height: fit-content;\r\n                }\r\n            </style>\r\n            <div id=\"rule-body\">\r\n                <div id=\"rules-container\"></div>\r\n                <select id=\"add-rule-entry-button\" value=\"+\">\r\n                    <option selected disabled>+</option>\r\n                    ${\r\n                        Reflect.ownKeys(ruleEntryClasses).map(key => {\r\n                            return `\r\n                                <option data-rule-key=\"${key}\">${key}</option>\r\n                            `;\r\n                        })\r\n                        .join(\"\")\r\n                    }\r\n                </select>\r\n            </div>\r\n        `;\r\n        \r\n        const addRuleEntryButton = this.shadowRoot.querySelector(\"#add-rule-entry-button\");\r\n        addRuleEntryButton.addEventListener(\"change\", () => {\r\n            const selectedOption = addRuleEntryButton.selectedOptions[0];\r\n            const selectedTagName = ruleEntryClasses[selectedOption.getAttribute(\"data-rule-key\")];\r\n            const rulesContainer = this.shadowRoot.querySelector(\"#rules-container\");\r\n            if (this.hasRuleEntryOfType(selectedTagName)){\r\n                return;\r\n            }\r\n            const ruleEntryElement = document.createElement(selectedTagName);\r\n            rulesContainer.appendChild(ruleEntryElement);\r\n            saveRules();\r\n        });\r\n    }\r\n    addRuleEntry(entryElement){\r\n        this.shadowRoot.querySelector(\"#rules-container\").appendChild(entryElement);\r\n    }\r\n    hasRuleEntryOfType(tagName){\r\n        const rulesContainer = this.shadowRoot.querySelector(\"#rules-container\");\r\n        return Array.from(rulesContainer.children).some(child => child.tagName.toLowerCase() === tagName);\r\n    }\r\n    getRuleData(){\r\n        const rulesContainer = this.shadowRoot.querySelector(\"#rules-container\");\r\n        const ruleEntries = Array.from(rulesContainer.children);\r\n        const ruleData = {};\r\n        for (let entry of ruleEntries){\r\n            ruleData[getRuleEntryKeyByTagName(entry.tagName.toLowerCase())] = entry.getRuleValue();\r\n        }\r\n        return ruleData;\r\n    }\r\n}\r\ncustomElements.define(\"rule-element\", RuleElement);\r\n\r\ndocument.querySelector(\"#add-rule-button\").addEventListener(\"click\", () => {\r\n    const ruleElement = document.createElement(\"rule-element\");\r\n    document.querySelector(\"#rule-list\").appendChild(ruleElement);\r\n});\r\n\r\nfunction saveRules(){\r\n    const ruleElements = Array.from(document.querySelector(\"#rule-list\").children);\r\n    const rulesData = ruleElements.map(ruleElement => ruleElement.getRuleData());\r\n    chrome.storage.sync.set(\r\n        { directoryRules: rulesData }, \r\n        () => console.log(\"saved\")\r\n    )\r\n}\r\n\r\nfunction restoreOptions() {\r\n    chrome.storage.sync.get(\r\n        {\r\n            baseDownloadDirectory: \"\", \r\n            directoryRules: []\r\n        }, \r\n        (items) => {\r\n            document.querySelector(\"#download-directory-input\").value = items.baseDownloadDirectory;\r\n        \r\n            const ruleList = document.querySelector(\"#rule-list\");\r\n            for (let rule of items.directoryRules){\r\n                const ruleElement = document.createElement(\"rule-element\");\r\n                ruleList.appendChild(ruleElement);\r\n\r\n                for (let ruleKey of Reflect.ownKeys(rule)){\r\n                    const entryClass = ruleEntryClasses[ruleKey];\r\n                    const entryElement = document.createElement(entryClass);\r\n                    entryElement.setRuleValue(rule[ruleKey]);\r\n                    ruleElement.addRuleEntry(entryElement);\r\n                }\r\n            }\r\n        }\r\n    );\r\n}\r\ndocument.addEventListener('DOMContentLoaded', restoreOptions);\r\n\r\n//baseDirectory ###\r\ndocument.querySelector(\"#download-directory-input\").addEventListener(\"change\", () => {\r\n    chrome.storage.sync.set(\r\n        { baseDownloadDirectory: document.querySelector(\"#download-directory-input\").value }, \r\n        () => console.log(\"saved\")\r\n    )\r\n});"]}