!function(){const e={},t=t=>Reflect.ownKeys(e).find((n=>e[n]===t));class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`\n            <style>\n                #delete-button {\n                    border-radius: 50%; \n                    background-color: white; \n                    border: 1px solid black;\n                }\n            </style>\n            ${this.getContentHTML()}\n            <button id="delete-button">x</button>\n        `,this.shadowRoot.querySelector("#delete-button").addEventListener("click",(e=>{this.remove(),u()}))}getContentHTML(){return""}static getRuleLabel(){return""}getRuleValue(){return null}setRuleValue(e){this._currentRuleValue=e}}class o extends n{constructor(){super(),this.shadowRoot.querySelector("#rule-value-input").addEventListener("change",(()=>u()))}getContentHTML(){return`\n            <label>${this.constructor.getRuleLabel()}</label>\n            <input id="rule-value-input" type="text" value="" />\n        `}static getRuleLabel(){return""}getRuleValue(){return this.shadowRoot.querySelector("#rule-value-input").value}setRuleValue(e){return this.shadowRoot.querySelector("#rule-value-input").value=e}}class r extends o{getRuleValue(){return this.shadowRoot.querySelector("#rule-value-input").value.split(",").map((e=>e.trim()))}setRuleValue(e){return this.shadowRoot.querySelector("#rule-value-input").value=e.join(", ")}}customElements.define("downloaded-as-rule-entry",class extends r{static getRuleLabel(){return"downloaded as"}}),e.downloadAs="downloaded-as-rule-entry";customElements.define("username-rule-entry",class extends r{static getRuleLabel(){return"username"}}),e.username="username-rule-entry";customElements.define("basedirectory-rule-entry",class extends r{static getRuleLabel(){return"base directory"}}),e.baseDirectory="basedirectory-rule-entry";customElements.define("folder-path-as-rule-entry",class extends r{static getRuleLabel(){return"folder path"}}),e.folderPath="folder-path-as-rule-entry";class l extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`\n            <style>\n                #rule-body {\n                    display: flex;\n                    flex-direction: row;\n                    flex: 1;\n                }\n                #rules-container {\n                    //display: grid;\n                    //grid-template-columns: 200px 1fr;\n                    display: flex;\n                    flex-direction: column;\n                }\n                #add-rule-entry-button {\n                    height: fit-content;\n                }\n            </style>\n            <div id="rule-body">\n                <div id="rules-container"></div>\n                <select id="add-rule-entry-button" value="+">\n                    <option selected disabled>+</option>\n                    ${Reflect.ownKeys(e).map((e=>`\n                                <option data-rule-key="${e}">${e}</option>\n                            `)).join("")}\n                </select>\n            </div>\n        `;const t=this.shadowRoot.querySelector("#add-rule-entry-button");t.addEventListener("change",(()=>{const n=t.selectedOptions[0],o=e[n.getAttribute("data-rule-key")],r=this.shadowRoot.querySelector("#rules-container");if(this.hasRuleEntryOfType(o))return;const l=document.createElement(o);r.appendChild(l),u()}))}addRuleEntry(e){this.shadowRoot.querySelector("#rules-container").appendChild(e)}hasRuleEntryOfType(e){const t=this.shadowRoot.querySelector("#rules-container");return Array.from(t.children).some((t=>t.tagName.toLowerCase()===e))}getRuleData(){const e=this.shadowRoot.querySelector("#rules-container"),n=Array.from(e.children),o={};for(let e of n)o[t(e.tagName.toLowerCase())]=e.getRuleValue();return o}}function u(){const e=Array.from(document.querySelector("#rule-list").children).map((e=>e.getRuleData()));chrome.storage.sync.set({directoryRules:e},(()=>console.log("saved")))}customElements.define("rule-element",l),document.querySelector("#add-rule-button").addEventListener("click",(()=>{const e=document.createElement("rule-element");document.querySelector("#rule-list").appendChild(e)})),document.addEventListener("DOMContentLoaded",(function(){chrome.storage.sync.get({baseDownloadDirectory:"",downloadMethod:"chrome-background",directoryRules:[]},(t=>{document.querySelector("#download-directory-input").value=t.baseDownloadDirectory,document.querySelector("#download-method").selectedIndex=["native","chrome-background"].indexOf(t.downloadMethod);const n=document.querySelector("#rule-list");for(let o of t.directoryRules){const t=document.createElement("rule-element");n.appendChild(t);for(let n of Reflect.ownKeys(o)){const r=e[n],l=document.createElement(r);l.setRuleValue(o[n]),t.addRuleEntry(l)}}}))})),document.querySelector("#download-method").addEventListener("input",(e=>{const t=e.srcElement,n=t[t.selectedIndex].value;chrome.storage.sync.set({downloadMethod:n},(()=>console.log("saved")))})),document.querySelector("#download-directory-input").addEventListener("change",(()=>{chrome.storage.sync.set({baseDownloadDirectory:document.querySelector("#download-directory-input").value},(()=>console.log("saved")))}))}();
//# sourceMappingURL=options.js.map
